const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuration Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'YOUR_SUPABASE_URL';
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'YOUR_SUPABASE_SERVICE_ROLE_KEY';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function deployMigration() {
  console.log('üöÄ D√©ploiement de la migration...');
  
  try {
    // Lire le fichier de migration
    const migrationPath = path.join(__dirname, 'supabase/migrations/20250526_create_conversation_analyses.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ Migration SQL lue avec succ√®s');
    console.log('üìä Ex√©cution de la migration...');
    
    // Ex√©cuter la migration via RPC
    const { data, error } = await supabase.rpc('exec', {
      sql: migrationSQL
    });
    
    if (error) {
      // Si RPC ne fonctionne pas, essayons une approche diff√©rente
      console.log('‚ö†Ô∏è RPC exec non disponible, utilisation d\'une approche alternative...');
      
      // Diviser le SQL en commandes individuelles
      const sqlCommands = migrationSQL
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
      
      console.log(`üìã ${sqlCommands.length} commandes SQL √† ex√©cuter`);
      
      // Note: Supabase client ne permet pas d'ex√©cuter du SQL arbitraire depuis le client
      // Il faut utiliser l'interface web ou le CLI
      console.log('‚ùå Impossible d\'ex√©cuter la migration via le client JavaScript');
      console.log('');
      console.log('üìù INSTRUCTIONS MANUELLES :');
      console.log('1. Allez sur https://whxkhrtlccxubvjgexmi.supabase.co/project/whxkhrtlccxubvjgexmi/sql');
      console.log('2. Copiez-collez le contenu suivant dans l\'√©diteur SQL :');
      console.log('');
      console.log('--- D√âBUT DU SQL ---');
      console.log(migrationSQL);
      console.log('--- FIN DU SQL ---');
      console.log('');
      console.log('3. Cliquez sur "Run" pour ex√©cuter');
      
      return false;
    }
    
    console.log('‚úÖ Migration appliqu√©e avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©ploiement :', error.message);
    return false;
  }
}

async function checkTableExists() {
  console.log('üîç V√©rification de la table conversation_analyses...');
  
  try {
    const { data, error } = await supabase
      .from('conversation_analyses')
      .select('id')
      .limit(1);
    
    if (error && error.code === '42P01') {
      console.log('‚ùå Table conversation_analyses n\'existe pas encore');
      return false;
    }
    
    if (error) {
      console.log('‚ö†Ô∏è Erreur lors de la v√©rification :', error.message);
      return false;
    }
    
    console.log('‚úÖ Table conversation_analyses existe');
    return true;
    
  } catch (error) {
    console.log('‚ùå Erreur lors de la v√©rification :', error.message);
    return false;
  }
}

async function deployEdgeFunctions() {
  console.log('‚ö° D√©ploiement des Edge Functions...');
  console.log('');
  console.log('üìù INSTRUCTIONS MANUELLES pour les Edge Functions :');
  console.log('');
  console.log('1. Fonction generate-ai-response :');
  console.log('   - Allez sur votre interface Supabase Functions');
  console.log('   - Cr√©ez une nouvelle fonction nomm√©e "generate-ai-response"');
  console.log('   - Copiez le contenu de : supabase/functions/generate-ai-response/index.ts');
  console.log('');
  console.log('2. Fonction analyze-emergency :');
  console.log('   - Cr√©ez une nouvelle fonction nomm√©e "analyze-emergency"');
  console.log('   - Copiez le contenu de : supabase/functions/analyze-emergency/index.ts');
  console.log('');
  console.log('3. Variables d\'environnement (pour chaque fonction) :');
  console.log('   - OPENAI_API_KEY = YOUR_OPENAI_API_KEY');
  console.log('   - SUPABASE_URL = YOUR_SUPABASE_URL');
  console.log('   - SUPABASE_SERVICE_ROLE_KEY = YOUR_SUPABASE_SERVICE_ROLE_KEY');
}

async function buildFrontend() {
  console.log('üèóÔ∏è Build du frontend...');
  
  try {
    const { exec } = require('child_process');
    const util = require('util');
    const execAsync = util.promisify(exec);
    
    console.log('üì¶ Installation des d√©pendances...');
    await execAsync('cd frontend && npm install');
    
    console.log('üî® Build du frontend...');
    await execAsync('cd frontend && npm run build');
    
    console.log('‚úÖ Frontend build√© avec succ√®s !');
    return true;
    
  } catch (error) {
    console.error('‚ùå Erreur lors du build :', error.message);
    return false;
  }
}

async function main() {
  console.log('üö® D√âPLOIEMENT DU SYST√àME DE D√âTECTION D\'URGENCE');
  console.log('================================================');
  console.log('');
  
  // 1. V√©rifier si la table existe
  const tableExists = await checkTableExists();
  
  // 2. D√©ployer la migration si n√©cessaire
  if (!tableExists) {
    await deployMigration();
  }
  
  // 3. Instructions pour les Edge Functions
  await deployEdgeFunctions();
  
  // 4. Build du frontend
  await buildFrontend();
  
  console.log('');
  console.log('üéØ √âTAPES SUIVANTES :');
  console.log('1. Ex√©cutez la migration SQL manuellement dans l\'interface Supabase');
  console.log('2. Cr√©ez les Edge Functions manuellement');
  console.log('3. D√©ployez le frontend sur Netlify');
  console.log('4. Testez le syst√®me en envoyant des messages avec urgences');
  console.log('');
  console.log('‚úÖ Script de d√©ploiement termin√© !');
}

main().catch(console.error);